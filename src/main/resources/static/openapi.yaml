openapi: 3.0.3
info:
  title: Cosmic Catalog API
  version: 1.0.0
  description: Simple API for astronomical observations.
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Health info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInfo'
  /api/observations:
    get:
      summary: List observations (paginated)
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, default: 20 }
        - in: query
          name: sort
          schema: { type: string }
      responses:
        '200':
          description: Paged ObservationDTO list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageObservationDTO'
  /api/featured:
    get:
      summary: Featured approved observations
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, default: 10 }
      responses:
        '200':
          description: Array of ObservationDTO
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationDTO'
  /api/observations/{id}/approve:
    post:
      summary: Approve observation (optimistic locking)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: expectedVersion
          required: false
          schema: { type: integer }
      responses:
        '200':
          description: Approved observation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationDTO'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Version conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/import/sample:
    post:
      summary: Import sample JWST observations
      responses:
        '200':
          description: Import summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSummary'
        '500':
          description: IO error during import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/import/realistic:
    post:
      summary: Import realistic telescope observations
      responses:
        '200':
          description: Import summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSummary'
        '500':
          description: IO error during import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
      required: [error, message]
    HealthInfo:
      type: object
      properties:
        version: { type: string }
        counts:
          type: object
          properties:
            obs: { type: integer }
            targets: { type: integer }
          required: [obs, targets]
        lastImport: { type: string, nullable: true }
      required: [version, counts]
    ObservationDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        telescope: { type: string }
        programId: { type: string }
        targetName: { type: string }
        ra: { type: number, format: double }
        dec: { type: number, format: double }
        obsDate: { type: string, format: date-time, nullable: true }
        instrument: { type: string, nullable: true }
        filters: { type: string, nullable: true }
        exposureSec: { type: integer }
        imageUrl: { type: string, nullable: true }
        score: { type: integer }
        status: { type: string, enum: [PENDING, APPROVED, REJECTED] }
        hasDontPanicBadge: { type: boolean }
      required: [id, telescope, targetName, ra, dec, exposureSec, score, status, hasDontPanicBadge]
    PageObservationDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ObservationDTO'
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
        size: { type: integer }
        number: { type: integer }
      required: [content]
    ImportSummary:
      type: object
      properties:
        source: { type: string }
        startedAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time }
        totalProcessed: { type: integer }
        duplicatesFound: { type: integer }
        imported: { type: integer }
        status: { type: string, enum: [SUCCEEDED, FAILED, PARTIAL] }
        notes: { type: string }
      required: [source, totalProcessed, imported, status]
